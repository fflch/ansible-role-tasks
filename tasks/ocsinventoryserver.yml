- name: Instalar pacotes necessários
  ansible.builtin.apt:
    name:
      - apache2
      - mariadb-client
      - libxml-simple-perl
      - libdbi-perl
      - libdbd-mysql-perl
      - libapache-dbi-perl
      - libnet-ip-perl
      - libsoap-lite-perl
      - libarchive-zip-perl
      #- make
      - build-essential
      - php
      - php-mbstring
      - php-soap
      - php-mysql
      - php-curl
      - php-xml
      - php-zip
      - php-gd
      - libswitch-perl
      - libio-compress-perl
      - libapache2-mod-perl2-dev
      - php-ldap
      - cpanminus
    state: present
    update_cache: yes

- name: Instalar módulos Perl via cpanm
  community.general.cpanm:
    name: "{{ item }}"
  loop:
    - XML::Entities
    #- Compress::Zlib
    - Apache2::SOAP
    - Mojolicious
    - Plack

- name: Baixar OCS Inventory
  ansible.builtin.get_url:
    url: "{{ tasks_ocsinventoryserver_download_url }}"
    dest: "{{ tasks_ocsinventoryserver_temp_dir }}/ocs.tar.gz"

- name: Extrair OCS Inventory
  ansible.builtin.unarchive:
    src: "{{ tasks_ocsinventoryserver_temp_dir }}/ocs.tar.gz"
    dest: "{{ tasks_ocsinventoryserver_temp_dir }}"
    remote_src: yes

- name: Remover arquivo temporário
  ansible.builtin.file:
    path: "{{ tasks_ocsinventoryserver_temp_dir }}/ocs.tar.gz"
    state: absent

- name: Criar setup.answers com defaults
  ansible.builtin.template:
    src: "ocs/setup.answers.j2"
    dest: "{{ tasks_ocsinventoryserver_extracted_dir }}/setup.answers"
    mode: '0600'

- name: Criar diretório ocsreports se não existir
  ansible.builtin.file:
    path: /usr/share/ocsinventory-reports/ocsreports
    state: directory
    owner: www-data
    group: www-data
    mode: '0775'
    recurse: yes

- name: Executar setup automático do OCS Inventory
  ansible.builtin.shell: |
    set -a
    source setup.answers
    set +a
    ./setup.sh -nocsreport 2>&1 | tee setup.log
  args:
    chdir: "{{ tasks_ocsinventoryserver_extracted_dir }}"
    creates: /etc/apache2/conf-available/ocsinventory-reports.conf
  environment:
    DEBIAN_FRONTEND: noninteractive
  async: 600
  poll: 10
  register: ocs_setup
  failed_when: ocs_setup.rc not in [0, 2]

- name: Exibir log do setup
  ansible.builtin.debug:
    var: ocs_setup.stdout_lines
  when: ocs_setup.stdout_lines is defined

- name: Ativar configuração z-ocsinventory-server
  ansible.builtin.command:
    cmd: a2enconf z-ocsinventory-server
    creates: /etc/apache2/conf-enabled/z-ocsinventory-server.conf
  notify: restart apache2

- name: Criar dbconfig.inc.php com template final
  ansible.builtin.template:
    src: "ocs/dbconfig.inc.php.j2"
    dest: "/usr/share/ocsinventory-reports/ocsreports/dbconfig.inc.php"
    owner: www-data
    group: www-data
    mode: '0640'
  notify: restart apache2

- name: Ativar configuração ocsinventory-reports
  ansible.builtin.command:
    cmd: a2enconf ocsinventory-reports
    creates: /etc/apache2/conf-enabled/ocsinventory-reports.conf
  notify: restart apache2

- name: Ajustar permissões do diretório OCS Inventory Reports
  ansible.builtin.file:
    path: /var/lib/ocsinventory-reports/
    owner: www-data
    group: www-data
    recurse: yes
    state: directory
    mode: '0755'

- name: Configurar manualmente o diretório do OCS (fallback)
  ansible.builtin.file:
    path: /var/www/html/ocsreports
    state: link
    src: /usr/share/ocsinventory-reports/ocsreports
    force: yes

- name: Reiniciar Apache para aplicar todas as configurações
  ansible.builtin.service:
    name: apache2
    state: restarted
    enabled: yes


- name: Criar schema do banco OCS (se ainda não existir)
  ansible.builtin.shell: |
    if ! mysql -h {{ tasks_ocsinventoryserver_db_host }} \
                -u {{ tasks_ocsinventoryserver_db_user }} \
                -p{{ tasks_ocsinventoryserver_db_password }} \
                -D {{ tasks_ocsinventoryserver_db_name }} \
                -e "SHOW TABLES LIKE 'hardware';" | grep -q hardware; then
        echo "Importando schema inicial do OCS..."
        mysql -h {{ tasks_ocsinventoryserver_db_host }} \
              -u {{ tasks_ocsinventoryserver_db_user }} \
              -p{{ tasks_ocsinventoryserver_db_password }} \
              -D {{ tasks_ocsinventoryserver_db_name }} \
              < /usr/share/ocsinventory-reports/ocsreports/files/ocsbase.sql
    else
        echo "Banco OCS já possui tabelas — ignorando import."
    fi
  args:
    executable: /bin/bash
  register: ocs_schema_import
  changed_when: "'Importando schema' in ocs_schema_import.stdout"

# - name: Alterar senha do admin OCS para SHA256
#   ansible.builtin.shell:
#     cmd: |
#       mysql -h {{ tasks_ocsinventoryserver_db_host }} \
#       -u {{ tasks_ocsinventoryserver_db_user }} \
#       -p{{ tasks_ocsinventoryserver_db_password }} \
#       -D {{ tasks_ocsinventoryserver_db_name }} \
#       -e "UPDATE operators SET passwd = SHA2('{{ tasks_ocsinventoryserver_admin_password }}', 256) WHERE id = 'admin';"
  # args:
  #   executable: /bin/bash

- name: Remover install.php por segurança
  ansible.builtin.file:
    path: /usr/share/ocsinventory-reports/ocsreports/install.php
    state: absent
