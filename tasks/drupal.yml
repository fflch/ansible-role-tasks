- name: Lê o arquivo CSV com os endereços dos sites
  set_fact:
    sites_file: "{{ lookup('file', tasks_drupal_sites_file) }}"

- name: Gera lista com os endereços dos sites a partir do arquivo CSV
  set_fact:
    sites: "{{ sites_file.split('\n') }}"

- name: Verificar se o diretório existe para cada site
  stat:
    path: "{{ tasks_drupal_dest }}/web/sites/{{ item }}"
  loop: "{{ sites }}"
  register: sites_status

- name: Lista o Gitconfig
  command: git config --list
  register: gitconfig

- name: Pesquisa e atribui o valor do domínio
  set_fact:
    domain: "{{ gitconfig.stdout_lines | regex_search(tasks_drupal_dest) }}"

- name: Adiciona o domínio como safe.directory no gitconfig
  command: git config --global --add safe.directory "{{ tasks_drupal_dest }}"
  when: not domain

- name: Clona o repositório do Drupal no github
  git:
    repo: "{{ tasks_drupal_repo }}"
    dest: "{{ tasks_drupal_dest }}"
    version: "{{ tasks_drupal_repo_version }}"
    force: yes
    update: yes

- name: Executa o Composer Install
  composer:
    command: install
    working_dir: "{{ tasks_drupal_dest }}"
  environment:
    COMPOSER_NO_INTERACTION: "1"
    COMPOSER_ALLOW_SUPERUSER: "1"

- name: Configura o Virtualhost
  template:
    src: templates/virtualhost.conf
    dest: "/etc/apache2/sites-available/{{ item }}.conf"
  loop: "{{ sites }}"

- name: Ativa o Virtualhost
  shell: a2ensite "{{ item }}"
  args:
    creates: "/etc/apache2/sites-enabled/{{ item }}.conf"
  loop: "{{ sites }}"

- name: Instala os sites que são novos
  command: >-
    {{ tasks_drupal_dest }}/vendor/bin/drush site-install fflchprofile \
            --sites-subdir={{ item.item }} \
            --db-url=mysql://{{ item.item.split('.')[0] }}:{{ lookup('passwordstore', 'sti/servidores/mysql/'+item.item.split('.')[0]) }}@{{ tasks_drupal_database }}/{{ item.item.split('.')[0] }} \
            --site-name={{ item.item.split('.')[0] }} \
            --account-name="admin" \
            --account-pass="admin" --yes
  args:
      chdir: "{{ tasks_drupal_dest }}"
  notify:
  - restart apache2      
  loop: "{{ sites_status.results }}"
  when: not item.stat.exists
  
- name: Insere linha no arquivo settings.php 
  lineinfile:
    path: "{{ tasks_drupal_dest }}/web/sites/{{ item }}/settings.php"
    line: "$settings['file_private_path']='/private/{{ item }}';"
  loop: "{{ sites }}"

- name: Atualiza os bancos de dados dos sites
  command: >-
    {{ tasks_drupal_dest }}/vendor/bin/drush updb {{ item }} -y
  args:
      chdir: "{{ tasks_drupal_dest }}/web/sites/{{ item }}"
  loop: "{{ sites }}"

- name: Atualiza as entidades dos sites
  command: >-
    {{ tasks_drupal_dest }}/vendor/bin/drush entup {{ item }} -y
  args:
      chdir: "{{ tasks_drupal_dest }}/web/sites/{{ item }}"
  loop: "{{ sites }}"

- name: Adicionar tarefa de backup diário
  ansible.builtin.cron:
    name: "Sites Drupal"
    minute: "*/5"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    job: "/usr/local/bin/php /home/myuser/bin/drush elysia-cron run --root=/home/mysite/public_html --uri=www.mysite.com > /home/mysite/cron.log 2>&1"
    user: "root"
    state: present
